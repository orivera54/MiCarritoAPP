// Mocks generated by Mockito 5.4.6 from annotations
// in supermercado_comparador/test/features/comparador/presentation/bloc/comparador_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:supermercado_comparador/features/comparador/domain/entities/producto_comparacion_almacen.dart'
    as _i9;
import 'package:supermercado_comparador/features/comparador/domain/entities/resultado_comparacion.dart'
    as _i3;
import 'package:supermercado_comparador/features/comparador/domain/repositories/comparador_repository.dart'
    as _i2;
import 'package:supermercado_comparador/features/comparador/domain/services/comparador_service.dart'
    as _i8;
import 'package:supermercado_comparador/features/comparador/domain/usecases/buscar_productos_por_qr.dart'
    as _i7;
import 'package:supermercado_comparador/features/comparador/domain/usecases/buscar_productos_similares.dart'
    as _i4;
import 'package:supermercado_comparador/features/comparador/domain/usecases/comparar_precios_producto.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeComparadorRepository_0 extends _i1.SmartFake
    implements _i2.ComparadorRepository {
  _FakeComparadorRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResultadoComparacion_1 extends _i1.SmartFake
    implements _i3.ResultadoComparacion {
  _FakeResultadoComparacion_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BuscarProductosSimilares].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuscarProductosSimilares extends _i1.Mock
    implements _i4.BuscarProductosSimilares {
  MockBuscarProductosSimilares() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ComparadorRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeComparadorRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ComparadorRepository);

  @override
  _i5.Future<_i3.ResultadoComparacion> call(String? terminoBusqueda) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [terminoBusqueda],
        ),
        returnValue: _i5.Future<_i3.ResultadoComparacion>.value(
            _FakeResultadoComparacion_1(
          this,
          Invocation.method(
            #call,
            [terminoBusqueda],
          ),
        )),
      ) as _i5.Future<_i3.ResultadoComparacion>);
}

/// A class which mocks [CompararPreciosProducto].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompararPreciosProducto extends _i1.Mock
    implements _i6.CompararPreciosProducto {
  MockCompararPreciosProducto() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ComparadorRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeComparadorRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ComparadorRepository);

  @override
  _i5.Future<_i3.ResultadoComparacion> call(int? productoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [productoId],
        ),
        returnValue: _i5.Future<_i3.ResultadoComparacion>.value(
            _FakeResultadoComparacion_1(
          this,
          Invocation.method(
            #call,
            [productoId],
          ),
        )),
      ) as _i5.Future<_i3.ResultadoComparacion>);
}

/// A class which mocks [BuscarProductosPorQR].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuscarProductosPorQR extends _i1.Mock
    implements _i7.BuscarProductosPorQR {
  MockBuscarProductosPorQR() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ComparadorRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeComparadorRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ComparadorRepository);

  @override
  _i5.Future<_i3.ResultadoComparacion> call(String? codigoQR) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [codigoQR],
        ),
        returnValue: _i5.Future<_i3.ResultadoComparacion>.value(
            _FakeResultadoComparacion_1(
          this,
          Invocation.method(
            #call,
            [codigoQR],
          ),
        )),
      ) as _i5.Future<_i3.ResultadoComparacion>);
}

/// A class which mocks [ComparadorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockComparadorService extends _i1.Mock implements _i8.ComparadorService {
  MockComparadorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i9.ProductoComparacionAlmacen>> obtenerAlmacenesProducto(
          String? nombreProducto) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerAlmacenesProducto,
          [nombreProducto],
        ),
        returnValue: _i5.Future<List<_i9.ProductoComparacionAlmacen>>.value(
            <_i9.ProductoComparacionAlmacen>[]),
      ) as _i5.Future<List<_i9.ProductoComparacionAlmacen>>);
}
