// Mocks generated by Mockito 5.4.6 from annotations
// in supermercado_comparador/test/features/comparador/domain/usecases/buscar_productos_por_qr_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:supermercado_comparador/features/comparador/domain/entities/resultado_comparacion.dart'
    as _i2;
import 'package:supermercado_comparador/features/comparador/domain/repositories/comparador_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResultadoComparacion_0 extends _i1.SmartFake
    implements _i2.ResultadoComparacion {
  _FakeResultadoComparacion_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ComparadorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockComparadorRepository extends _i1.Mock
    implements _i3.ComparadorRepository {
  MockComparadorRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ResultadoComparacion> buscarProductosSimilares(
          String? terminoBusqueda) =>
      (super.noSuchMethod(
        Invocation.method(
          #buscarProductosSimilares,
          [terminoBusqueda],
        ),
        returnValue: _i4.Future<_i2.ResultadoComparacion>.value(
            _FakeResultadoComparacion_0(
          this,
          Invocation.method(
            #buscarProductosSimilares,
            [terminoBusqueda],
          ),
        )),
      ) as _i4.Future<_i2.ResultadoComparacion>);

  @override
  _i4.Future<_i2.ResultadoComparacion> compararPreciosProducto(
          int? productoId) =>
      (super.noSuchMethod(
        Invocation.method(
          #compararPreciosProducto,
          [productoId],
        ),
        returnValue: _i4.Future<_i2.ResultadoComparacion>.value(
            _FakeResultadoComparacion_0(
          this,
          Invocation.method(
            #compararPreciosProducto,
            [productoId],
          ),
        )),
      ) as _i4.Future<_i2.ResultadoComparacion>);

  @override
  _i4.Future<_i2.ResultadoComparacion> buscarProductosPorQR(String? codigoQR) =>
      (super.noSuchMethod(
        Invocation.method(
          #buscarProductosPorQR,
          [codigoQR],
        ),
        returnValue: _i4.Future<_i2.ResultadoComparacion>.value(
            _FakeResultadoComparacion_0(
          this,
          Invocation.method(
            #buscarProductosPorQR,
            [codigoQR],
          ),
        )),
      ) as _i4.Future<_i2.ResultadoComparacion>);

  @override
  _i4.Future<List<Map<String, dynamic>>> obtenerProductosSimilares(
          String? nombre) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerProductosSimilares,
          [nombre],
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);
}
