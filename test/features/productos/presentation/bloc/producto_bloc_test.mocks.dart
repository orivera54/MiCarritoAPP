// Mocks generated by Mockito 5.4.6 from annotations
// in supermercado_comparador/test/features/productos/presentation/bloc/producto_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:supermercado_comparador/features/productos/domain/entities/producto.dart'
    as _i3;
import 'package:supermercado_comparador/features/productos/domain/repositories/producto_repository.dart'
    as _i2;
import 'package:supermercado_comparador/features/productos/domain/usecases/create_producto.dart'
    as _i12;
import 'package:supermercado_comparador/features/productos/domain/usecases/delete_producto.dart'
    as _i14;
import 'package:supermercado_comparador/features/productos/domain/usecases/get_all_productos.dart'
    as _i4;
import 'package:supermercado_comparador/features/productos/domain/usecases/get_producto_by_id.dart'
    as _i8;
import 'package:supermercado_comparador/features/productos/domain/usecases/get_producto_by_qr.dart'
    as _i10;
import 'package:supermercado_comparador/features/productos/domain/usecases/get_productos_by_almacen.dart'
    as _i6;
import 'package:supermercado_comparador/features/productos/domain/usecases/get_productos_by_categoria.dart'
    as _i7;
import 'package:supermercado_comparador/features/productos/domain/usecases/search_productos_by_name.dart'
    as _i9;
import 'package:supermercado_comparador/features/productos/domain/usecases/search_productos_with_filters.dart'
    as _i11;
import 'package:supermercado_comparador/features/productos/domain/usecases/update_producto.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductoRepository_0 extends _i1.SmartFake
    implements _i2.ProductoRepository {
  _FakeProductoRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProducto_1 extends _i1.SmartFake implements _i3.Producto {
  _FakeProducto_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllProductos].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProductos extends _i1.Mock implements _i4.GetAllProductos {
  MockGetAllProductos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<List<_i3.Producto>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Producto>>.value(<_i3.Producto>[]),
      ) as _i5.Future<List<_i3.Producto>>);
}

/// A class which mocks [GetProductosByAlmacen].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductosByAlmacen extends _i1.Mock
    implements _i6.GetProductosByAlmacen {
  MockGetProductosByAlmacen() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<List<_i3.Producto>> call(int? almacenId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [almacenId],
        ),
        returnValue: _i5.Future<List<_i3.Producto>>.value(<_i3.Producto>[]),
      ) as _i5.Future<List<_i3.Producto>>);
}

/// A class which mocks [GetProductosByCategoria].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductosByCategoria extends _i1.Mock
    implements _i7.GetProductosByCategoria {
  MockGetProductosByCategoria() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<List<_i3.Producto>> call(int? categoriaId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [categoriaId],
        ),
        returnValue: _i5.Future<List<_i3.Producto>>.value(<_i3.Producto>[]),
      ) as _i5.Future<List<_i3.Producto>>);
}

/// A class which mocks [GetProductoById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductoById extends _i1.Mock implements _i8.GetProductoById {
  MockGetProductoById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<_i3.Producto?> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i5.Future<_i3.Producto?>.value(),
      ) as _i5.Future<_i3.Producto?>);
}

/// A class which mocks [SearchProductosByName].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchProductosByName extends _i1.Mock
    implements _i9.SearchProductosByName {
  MockSearchProductosByName() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<List<_i3.Producto>> call(String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [searchTerm],
        ),
        returnValue: _i5.Future<List<_i3.Producto>>.value(<_i3.Producto>[]),
      ) as _i5.Future<List<_i3.Producto>>);
}

/// A class which mocks [GetProductoByQR].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductoByQR extends _i1.Mock implements _i10.GetProductoByQR {
  MockGetProductoByQR() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<_i3.Producto?> call(String? codigoQR) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [codigoQR],
        ),
        returnValue: _i5.Future<_i3.Producto?>.value(),
      ) as _i5.Future<_i3.Producto?>);
}

/// A class which mocks [SearchProductosWithFilters].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchProductosWithFilters extends _i1.Mock
    implements _i11.SearchProductosWithFilters {
  MockSearchProductosWithFilters() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<List<_i3.Producto>> call({
    String? searchTerm,
    int? almacenId,
    int? categoriaId,
    double? minPrice,
    double? maxPrice,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #searchTerm: searchTerm,
            #almacenId: almacenId,
            #categoriaId: categoriaId,
            #minPrice: minPrice,
            #maxPrice: maxPrice,
          },
        ),
        returnValue: _i5.Future<List<_i3.Producto>>.value(<_i3.Producto>[]),
      ) as _i5.Future<List<_i3.Producto>>);
}

/// A class which mocks [CreateProducto].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProducto extends _i1.Mock implements _i12.CreateProducto {
  MockCreateProducto() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<_i3.Producto> call(_i3.Producto? producto) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [producto],
        ),
        returnValue: _i5.Future<_i3.Producto>.value(_FakeProducto_1(
          this,
          Invocation.method(
            #call,
            [producto],
          ),
        )),
      ) as _i5.Future<_i3.Producto>);
}

/// A class which mocks [UpdateProducto].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProducto extends _i1.Mock implements _i13.UpdateProducto {
  MockUpdateProducto() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<_i3.Producto> call(_i3.Producto? producto) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [producto],
        ),
        returnValue: _i5.Future<_i3.Producto>.value(_FakeProducto_1(
          this,
          Invocation.method(
            #call,
            [producto],
          ),
        )),
      ) as _i5.Future<_i3.Producto>);
}

/// A class which mocks [DeleteProducto].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProducto extends _i1.Mock implements _i14.DeleteProducto {
  MockDeleteProducto() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ProductoRepository);

  @override
  _i5.Future<void> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
