// Mocks generated by Mockito 5.4.6 from annotations
// in supermercado_comparador/test/features/calculadora/presentation/bloc/calculadora_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:supermercado_comparador/features/calculadora/domain/entities/lista_compra.dart'
    as _i2;
import 'package:supermercado_comparador/features/calculadora/domain/services/mejor_precio_service.dart'
    as _i6;
import 'package:supermercado_comparador/features/calculadora/domain/usecases/agregar_item_calculadora.dart'
    as _i3;
import 'package:supermercado_comparador/features/calculadora/domain/usecases/eliminar_item_calculadora.dart'
    as _i8;
import 'package:supermercado_comparador/features/calculadora/domain/usecases/guardar_lista_compra.dart'
    as _i10;
import 'package:supermercado_comparador/features/calculadora/domain/usecases/limpiar_lista_actual.dart'
    as _i11;
import 'package:supermercado_comparador/features/calculadora/domain/usecases/modificar_cantidad_item.dart'
    as _i7;
import 'package:supermercado_comparador/features/calculadora/domain/usecases/obtener_lista_actual.dart'
    as _i9;
import 'package:supermercado_comparador/features/productos/domain/entities/producto.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeListaCompra_0 extends _i1.SmartFake implements _i2.ListaCompra {
  _FakeListaCompra_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AgregarItemCalculadora].
///
/// See the documentation for Mockito's code generation for more information.
class MockAgregarItemCalculadora extends _i1.Mock
    implements _i3.AgregarItemCalculadora {
  MockAgregarItemCalculadora() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ListaCompra> call({
    required _i5.Producto? producto,
    int? cantidad = 1,
    _i6.MejorPrecioInfo? mejorPrecio,
    int? almacenId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #producto: producto,
            #cantidad: cantidad,
            #mejorPrecio: mejorPrecio,
            #almacenId: almacenId,
          },
        ),
        returnValue: _i4.Future<_i2.ListaCompra>.value(_FakeListaCompra_0(
          this,
          Invocation.method(
            #call,
            [],
            {
              #producto: producto,
              #cantidad: cantidad,
              #mejorPrecio: mejorPrecio,
              #almacenId: almacenId,
            },
          ),
        )),
      ) as _i4.Future<_i2.ListaCompra>);
}

/// A class which mocks [ModificarCantidadItem].
///
/// See the documentation for Mockito's code generation for more information.
class MockModificarCantidadItem extends _i1.Mock
    implements _i7.ModificarCantidadItem {
  MockModificarCantidadItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ListaCompra> call({
    required int? productoId,
    required int? nuevaCantidad,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #productoId: productoId,
            #nuevaCantidad: nuevaCantidad,
          },
        ),
        returnValue: _i4.Future<_i2.ListaCompra>.value(_FakeListaCompra_0(
          this,
          Invocation.method(
            #call,
            [],
            {
              #productoId: productoId,
              #nuevaCantidad: nuevaCantidad,
            },
          ),
        )),
      ) as _i4.Future<_i2.ListaCompra>);
}

/// A class which mocks [EliminarItemCalculadora].
///
/// See the documentation for Mockito's code generation for more information.
class MockEliminarItemCalculadora extends _i1.Mock
    implements _i8.EliminarItemCalculadora {
  MockEliminarItemCalculadora() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ListaCompra> call({required int? productoId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#productoId: productoId},
        ),
        returnValue: _i4.Future<_i2.ListaCompra>.value(_FakeListaCompra_0(
          this,
          Invocation.method(
            #call,
            [],
            {#productoId: productoId},
          ),
        )),
      ) as _i4.Future<_i2.ListaCompra>);
}

/// A class which mocks [ObtenerListaActual].
///
/// See the documentation for Mockito's code generation for more information.
class MockObtenerListaActual extends _i1.Mock
    implements _i9.ObtenerListaActual {
  MockObtenerListaActual() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ListaCompra> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.ListaCompra>.value(_FakeListaCompra_0(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ListaCompra>);
}

/// A class which mocks [GuardarListaCompra].
///
/// See the documentation for Mockito's code generation for more information.
class MockGuardarListaCompra extends _i1.Mock
    implements _i10.GuardarListaCompra {
  MockGuardarListaCompra() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ListaCompra> call({String? nombre}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#nombre: nombre},
        ),
        returnValue: _i4.Future<_i2.ListaCompra>.value(_FakeListaCompra_0(
          this,
          Invocation.method(
            #call,
            [],
            {#nombre: nombre},
          ),
        )),
      ) as _i4.Future<_i2.ListaCompra>);
}

/// A class which mocks [LimpiarListaActual].
///
/// See the documentation for Mockito's code generation for more information.
class MockLimpiarListaActual extends _i1.Mock
    implements _i11.LimpiarListaActual {
  MockLimpiarListaActual() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ListaCompra> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.ListaCompra>.value(_FakeListaCompra_0(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ListaCompra>);
}

/// A class which mocks [MejorPrecioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMejorPrecioService extends _i1.Mock
    implements _i6.MejorPrecioService {
  MockMejorPrecioService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.MejorPrecioInfo?> obtenerMejorPrecio(String? nombreProducto) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerMejorPrecio,
          [nombreProducto],
        ),
        returnValue: _i4.Future<_i6.MejorPrecioInfo?>.value(),
      ) as _i4.Future<_i6.MejorPrecioInfo?>);
}
