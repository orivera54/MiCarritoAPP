// Mocks generated by Mockito 5.4.6 from annotations
// in supermercado_comparador/test/features/almacenes/domain/usecases/delete_almacen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:supermercado_comparador/features/almacenes/domain/entities/almacen.dart'
    as _i2;
import 'package:supermercado_comparador/features/almacenes/domain/repositories/almacen_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAlmacen_0 extends _i1.SmartFake implements _i2.Almacen {
  _FakeAlmacen_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AlmacenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlmacenRepository extends _i1.Mock implements _i3.AlmacenRepository {
  MockAlmacenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Almacen>> getAllAlmacenes() => (super.noSuchMethod(
        Invocation.method(
          #getAllAlmacenes,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Almacen>>.value(<_i2.Almacen>[]),
      ) as _i4.Future<List<_i2.Almacen>>);

  @override
  _i4.Future<_i2.Almacen?> getAlmacenById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAlmacenById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Almacen?>.value(),
      ) as _i4.Future<_i2.Almacen?>);

  @override
  _i4.Future<_i2.Almacen> createAlmacen(_i2.Almacen? almacen) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAlmacen,
          [almacen],
        ),
        returnValue: _i4.Future<_i2.Almacen>.value(_FakeAlmacen_0(
          this,
          Invocation.method(
            #createAlmacen,
            [almacen],
          ),
        )),
      ) as _i4.Future<_i2.Almacen>);

  @override
  _i4.Future<_i2.Almacen> updateAlmacen(_i2.Almacen? almacen) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAlmacen,
          [almacen],
        ),
        returnValue: _i4.Future<_i2.Almacen>.value(_FakeAlmacen_0(
          this,
          Invocation.method(
            #updateAlmacen,
            [almacen],
          ),
        )),
      ) as _i4.Future<_i2.Almacen>);

  @override
  _i4.Future<void> deleteAlmacen(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAlmacen,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> almacenNameExists(
    String? nombre, {
    int? excludeId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #almacenNameExists,
          [nombre],
          {#excludeId: excludeId},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
