// Mocks generated by Mockito 5.4.6 from annotations
// in supermercado_comparador/test/features/categorias/presentation/bloc/categoria_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:supermercado_comparador/features/categorias/domain/entities/categoria.dart'
    as _i3;
import 'package:supermercado_comparador/features/categorias/domain/repositories/categoria_repository.dart'
    as _i2;
import 'package:supermercado_comparador/features/categorias/domain/usecases/create_categoria.dart'
    as _i7;
import 'package:supermercado_comparador/features/categorias/domain/usecases/delete_categoria.dart'
    as _i9;
import 'package:supermercado_comparador/features/categorias/domain/usecases/ensure_default_category.dart'
    as _i10;
import 'package:supermercado_comparador/features/categorias/domain/usecases/get_all_categorias.dart'
    as _i4;
import 'package:supermercado_comparador/features/categorias/domain/usecases/get_categoria_by_id.dart'
    as _i6;
import 'package:supermercado_comparador/features/categorias/domain/usecases/update_categoria.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoriaRepository_0 extends _i1.SmartFake
    implements _i2.CategoriaRepository {
  _FakeCategoriaRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoria_1 extends _i1.SmartFake implements _i3.Categoria {
  _FakeCategoria_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllCategorias].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllCategorias extends _i1.Mock implements _i4.GetAllCategorias {
  MockGetAllCategorias() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CategoriaRepository);

  @override
  _i5.Future<List<_i3.Categoria>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Categoria>>.value(<_i3.Categoria>[]),
      ) as _i5.Future<List<_i3.Categoria>>);
}

/// A class which mocks [GetCategoriaById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoriaById extends _i1.Mock implements _i6.GetCategoriaById {
  MockGetCategoriaById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CategoriaRepository);

  @override
  _i5.Future<_i3.Categoria?> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i5.Future<_i3.Categoria?>.value(),
      ) as _i5.Future<_i3.Categoria?>);
}

/// A class which mocks [CreateCategoria].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateCategoria extends _i1.Mock implements _i7.CreateCategoria {
  MockCreateCategoria() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CategoriaRepository);

  @override
  _i5.Future<_i3.Categoria> call(_i3.Categoria? categoria) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [categoria],
        ),
        returnValue: _i5.Future<_i3.Categoria>.value(_FakeCategoria_1(
          this,
          Invocation.method(
            #call,
            [categoria],
          ),
        )),
      ) as _i5.Future<_i3.Categoria>);
}

/// A class which mocks [UpdateCategoria].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCategoria extends _i1.Mock implements _i8.UpdateCategoria {
  MockUpdateCategoria() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CategoriaRepository);

  @override
  _i5.Future<_i3.Categoria> call(_i3.Categoria? categoria) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [categoria],
        ),
        returnValue: _i5.Future<_i3.Categoria>.value(_FakeCategoria_1(
          this,
          Invocation.method(
            #call,
            [categoria],
          ),
        )),
      ) as _i5.Future<_i3.Categoria>);
}

/// A class which mocks [DeleteCategoria].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCategoria extends _i1.Mock implements _i9.DeleteCategoria {
  MockDeleteCategoria() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CategoriaRepository);

  @override
  _i5.Future<void> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [EnsureDefaultCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnsureDefaultCategory extends _i1.Mock
    implements _i10.EnsureDefaultCategory {
  MockEnsureDefaultCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CategoriaRepository);

  @override
  _i5.Future<_i3.Categoria> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Categoria>.value(_FakeCategoria_1(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Categoria>);
}
