// Mocks generated by Mockito 5.4.6 from annotations
// in supermercado_comparador/test/core/initialization/app_initialization_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:sqflite/sqflite.dart' as _i5;
import 'package:supermercado_comparador/core/database/database_helper.dart'
    as _i11;
import 'package:supermercado_comparador/features/almacenes/domain/entities/almacen.dart'
    as _i9;
import 'package:supermercado_comparador/features/almacenes/domain/repositories/almacen_repository.dart'
    as _i4;
import 'package:supermercado_comparador/features/almacenes/domain/usecases/get_all_almacenes.dart'
    as _i8;
import 'package:supermercado_comparador/features/categorias/domain/entities/categoria.dart'
    as _i3;
import 'package:supermercado_comparador/features/categorias/domain/repositories/categoria_repository.dart'
    as _i2;
import 'package:supermercado_comparador/features/categorias/domain/usecases/ensure_default_category.dart'
    as _i7;
import 'package:supermercado_comparador/features/categorias/domain/usecases/get_all_categorias.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoriaRepository_0 extends _i1.SmartFake
    implements _i2.CategoriaRepository {
  _FakeCategoriaRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoria_1 extends _i1.SmartFake implements _i3.Categoria {
  _FakeCategoria_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlmacenRepository_2 extends _i1.SmartFake
    implements _i4.AlmacenRepository {
  _FakeAlmacenRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_3 extends _i1.SmartFake implements _i5.Database {
  _FakeDatabase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_4<T1> extends _i1.SmartFake implements _i6.Future<T1> {
  _FakeFuture_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryCursor_5 extends _i1.SmartFake implements _i5.QueryCursor {
  _FakeQueryCursor_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatch_6 extends _i1.SmartFake implements _i5.Batch {
  _FakeBatch_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EnsureDefaultCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnsureDefaultCategory extends _i1.Mock
    implements _i7.EnsureDefaultCategory {
  MockEnsureDefaultCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CategoriaRepository);

  @override
  _i6.Future<_i3.Categoria> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<_i3.Categoria>.value(_FakeCategoria_1(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Categoria>);
}

/// A class which mocks [GetAllAlmacenes].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllAlmacenes extends _i1.Mock implements _i8.GetAllAlmacenes {
  MockGetAllAlmacenes() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AlmacenRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAlmacenRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.AlmacenRepository);

  @override
  _i6.Future<List<_i9.Almacen>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<List<_i9.Almacen>>.value(<_i9.Almacen>[]),
      ) as _i6.Future<List<_i9.Almacen>>);
}

/// A class which mocks [GetAllCategorias].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllCategorias extends _i1.Mock implements _i10.GetAllCategorias {
  MockGetAllCategorias() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoriaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CategoriaRepository);

  @override
  _i6.Future<List<_i3.Categoria>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<List<_i3.Categoria>>.value(<_i3.Categoria>[]),
      ) as _i6.Future<List<_i3.Categoria>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i11.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i5.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i6.Future<_i5.Database>.value(_FakeDatabase_3(
          this,
          Invocation.getter(#database),
        )),
      ) as _i6.Future<_i5.Database>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> resetDatabase() => (super.noSuchMethod(
        Invocation.method(
          #resetDatabase,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> databaseExists() => (super.noSuchMethod(
        Invocation.method(
          #databaseExists,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<String> getDatabasePath() => (super.noSuchMethod(
        Invocation.method(
          #getDatabasePath,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getDatabasePath,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<void> recreateDatabase() => (super.noSuchMethod(
        Invocation.method(
          #recreateDatabase,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i5.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  _i5.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_3(
          this,
          Invocation.getter(#database),
        ),
      ) as _i5.Database);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<T> transaction<T>(
    _i6.Future<T> Function(_i5.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#exclusive: exclusive},
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#exclusive: exclusive},
                ),
              ),
              (T v) => _i6.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#exclusive: exclusive},
              ),
            ),
      ) as _i6.Future<T>);

  @override
  _i6.Future<T> readTransaction<T>(
          _i6.Future<T> Function(_i5.Transaction)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #readTransaction,
          [action],
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #readTransaction,
                  [action],
                ),
              ),
              (T v) => _i6.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #readTransaction,
                [action],
              ),
            ),
      ) as _i6.Future<T>);

  @override
  _i6.Future<T> devInvokeMethod<T>(
    String? method, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeMethod,
                  [
                    method,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i6.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #devInvokeMethod,
                [
                  method,
                  arguments,
                ],
              ),
            ),
      ) as _i6.Future<T>);

  @override
  _i6.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeSqlMethod,
          [
            method,
            sql,
            arguments,
          ],
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeSqlMethod,
                  [
                    method,
                    sql,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i6.Future<T>.value(v),
            ) ??
            _FakeFuture_4<T>(
              this,
              Invocation.method(
                #devInvokeSqlMethod,
                [
                  method,
                  sql,
                  arguments,
                ],
              ),
            ),
      ) as _i6.Future<T>);

  @override
  _i6.Future<void> execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i5.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i6.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i6.Future<List<Map<String, Object?>>>);

  @override
  _i6.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i6.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i6.Future<List<Map<String, Object?>>>);

  @override
  _i6.Future<_i5.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [
            sql,
            arguments,
          ],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i6.Future<_i5.QueryCursor>.value(_FakeQueryCursor_5(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
      ) as _i6.Future<_i5.QueryCursor>);

  @override
  _i6.Future<_i5.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i6.Future<_i5.QueryCursor>.value(_FakeQueryCursor_5(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
      ) as _i6.Future<_i5.QueryCursor>);

  @override
  _i6.Future<int> rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i5.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i5.Batch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeBatch_6(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i5.Batch);
}
